{"version":3,"sources":["components/Choice.tsx","components/YouChoose.tsx","components/EndModal.tsx","components/VideoPlayer.tsx","index.tsx"],"names":["Choice","props","handleClick","bind","this","onSelection","option","Button","key","text","variant","size","onClick","React","Component","YouChoose","choices","question","options","map","currentOption","Modal","show","fade","aria-labelledby","centered","Header","closeButton","Title","id","Body","description","Footer","EndModal","idx","decisions","className","VideoPlayer","state","currentVideo","videos","videoPlaying","items","Array","selectVideo","restartVideo","idToFind","find","video","changeState","next","nextVideo","findVideoById","routes","forEach","route","item","includes","setState","push","findVideoByQuestion","splice","indexOf","attribute","p","path","questionBar","Container","width","height","onEnded","clipEnd","autoPlay","controls","src","type","myVideos","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b41d1888.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Option } from \"./VideoPlayer\";\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nexport interface ChoiceProps {\r\n    option: Option;\r\n    onSelection : (option : Option)=> void;\r\n  }\r\n  \r\nexport class Choice extends React.Component<ChoiceProps, {}> {\r\n\r\n  constructor(props :ChoiceProps) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n    \r\n    handleClick() {\r\n      this.props.onSelection(this.props.option);\r\n    }\r\n    \r\n    render () {\r\n      return (\r\n        <div>\r\n            <Button key={this.props.option.text} variant=\"primary\" size=\"lg\" onClick={this.handleClick}>{this.props.option.text}</Button>\r\n        </div>\r\n      )\r\n    }\r\n  }","import { Question } from \"./VideoPlayer\";\r\nimport { Option } from \"./VideoPlayer\";\r\nimport { Choice } from \"./Choice\";\r\nimport React from \"react\";\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nexport interface YouChooseProps {\r\n  question: Question;\r\n  onSelection: (option: Option) => void;\r\n}\r\n\r\nexport class YouChoose extends React.Component<YouChooseProps, {}> {\r\n  render() {\r\n    var choices: Array<JSX.Element> = this.props.question.options.map(\r\n      (currentOption): JSX.Element => {\r\n        return <Choice key={currentOption.text} option={currentOption} onSelection={this.props.onSelection} />\r\n      });\r\n\r\n    return (\r\n      <Modal\r\n        show\r\n        fade\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          You Decide\r\n        </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4>{this.props.question.text}</h4>\r\n          <p>{this.props.question.description}</p>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          {choices}\r\n        </Modal.Footer>\r\n      </Modal>\r\n    )\r\n  }\r\n}","import { Question } from \"./VideoPlayer\";\r\nimport React from \"react\";\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport interface EndModalProps {\r\n  decisions: Array<Question>;\r\n  onSelection: (option: Question) => void;\r\n}\r\n\r\nexport class EndModal extends React.Component<EndModalProps, {}> {\r\n  constructor(props :EndModalProps) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(idx: number) {\r\n    this.props.onSelection(this.props.decisions[idx]);\r\n  }\r\n\r\n  render() {\r\n\r\n    var choices: Array<JSX.Element> = this.props.decisions.map(\r\n      (currentOption, idx): JSX.Element => {\r\n        return <Button variant=\"primary\" size=\"lg\" key={currentOption.text} onClick={this.handleClick.bind(this, idx)}>{currentOption.text}</Button>\r\n      });\r\n\r\n    return (\r\n      <Modal\r\n        show\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Oh No. \r\n        </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4>You didn't surivie Lockdown</h4>\r\n          <p>Maybe one of your previous decisions was not right. Want to change your mind at a past decision?</p>\r\n          <div className=\"btn-group-vertical\">\r\n             {choices}\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    )\r\n  }\r\n}","import * as React from \"react\";\r\nimport { YouChoose } from \"./YouChoose\";\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport { EndModal } from \"./EndModal\";\r\n\r\nexport interface VideoProps {\r\n  videos: Array<Video>;\r\n}\r\n\r\ninterface VideoState {\r\n  currentVideo: Video;\r\n  videoPlaying: boolean;\r\n  items: Array<string>;\r\n  decisions: Array<Question>;\r\n}\r\n\r\nexport interface Video {\r\n  id: number;\r\n  name: string;\r\n  path?: string;\r\n  next?: number;\r\n  question?: Question;\r\n  routes? : Array<Route>, \r\n  attribute? : string;\r\n}\r\n\r\nexport interface Route {\r\n  item?: string;\r\n  next?: number;\r\n}\r\n\r\nexport interface Question {\r\n  text: string;\r\n  description: string;\r\n  options: Array<Option>\r\n}\r\n\r\nexport interface Option {\r\n  text: string;\r\n  item?: string;\r\n  next: number, \r\n}\r\n\r\nexport class VideoPlayer extends React.Component<VideoProps, VideoState> {\r\n\r\n  constructor(props: VideoProps) {\r\n    super(props);\r\n    this.state = {\r\n      currentVideo: this.props.videos[0],\r\n      videoPlaying: true,\r\n      items: new Array<string>(),\r\n      decisions: new Array<Question>()\r\n    }\r\n    this.selectVideo = this.selectVideo.bind(this);\r\n    this.restartVideo = this.restartVideo.bind(this);\r\n  }\r\n\r\n  findVideoById(videos: Array<Video>, idToFind: number): Video | undefined {\r\n    return videos.find((video: Video) => { return video.id === idToFind })\r\n  }\r\n\r\n  findVideoByQuestion(videos: Array<Video>, question: Question): Video | undefined {\r\n    return videos.find((video: Video) => { return video.question === question })\r\n  }\r\n\r\n  /**\r\n   * When a clip ends, if there is another video then just play that video\r\n   */\r\n  clipEnd() {\r\n    const changeState = { ...this.state }\r\n    if (this.state.currentVideo.next) {\r\n      let nextVideo = this.findVideoById(this.props.videos, this.state.currentVideo.next);\r\n      if (nextVideo) {\r\n        if (nextVideo.routes) {\r\n          nextVideo.routes.forEach( (route:Route) =>{\r\n              if (route.item && route.next && changeState.items.includes(route.item)){\r\n                nextVideo = this.findVideoById(this.props.videos, route.next);\r\n              }\r\n          });\r\n        }\r\n        changeState.currentVideo = nextVideo;\r\n        changeState.videoPlaying = true;\r\n      }\r\n    } else {\r\n      changeState.videoPlaying = false;\r\n    }\r\n    this.setState(changeState);\r\n  }\r\n\r\n  selectVideo(option: Option) {\r\n    const changeState = { ...this.state }\r\n    let nextVideo = this.findVideoById(this.props.videos, option.next);\r\n    if (nextVideo) {\r\n\r\n      changeState.currentVideo = nextVideo;\r\n      changeState.videoPlaying = true;\r\n      if (option.item) {\r\n        changeState.items.push(option.item);\r\n      }\r\n      if (this.state.currentVideo.question){\r\n        changeState.decisions.push(this.state.currentVideo.question)\r\n      }\r\n    }\r\n    this.setState(changeState);\r\n  }\r\n\r\n  restartVideo(option: Question) {\r\n    const changeState = { ...this.state }\r\n    const nextVideo = this.findVideoByQuestion(this.props.videos, option);\r\n    if (nextVideo) {\r\n      changeState.currentVideo = nextVideo;\r\n      changeState.videoPlaying = true;\r\n      changeState.decisions.splice(changeState.decisions.indexOf(option), 9e9);\r\n      if (nextVideo.attribute){\r\n        // wipes out previous item\r\n        changeState.items = new Array<string>();\r\n      }\r\n    }\r\n    this.setState(changeState);\r\n  }\r\n\r\n  render() {\r\n    var p = \"http://localhost:3000/lockdown/videos/\" + this.state.currentVideo.path + \".mp4\";\r\n\r\n    var questionBar: JSX.Element = <br />;\r\n\r\n    if (!this.state.videoPlaying) {\r\n      if (this.state.currentVideo.question){\r\n        questionBar = <YouChoose question={this.state.currentVideo.question} onSelection={this.selectVideo} />\r\n      } else{\r\n        questionBar = <EndModal decisions={this.state.decisions} onSelection={this.restartVideo} />\r\n      }\r\n    }\r\n    return (\r\n      <Container className=\"p-3\">\r\n        <div className=\"embed-responsive embed-responsive-16by9\">\r\n          <video className=\"embed-responsive-item\" key={p} width=\"1100\" height=\"650\" onEnded={this.clipEnd.bind(this)}\r\n            autoPlay controls>\r\n            <source src={p} type=\"video/mp4\" />\r\n          No video\r\n        </video>\r\n        {questionBar}\r\n        </div>\r\n      </Container>\r\n    )\r\n  }\r\n}","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { videos} from \"./videos.json\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { VideoPlayer, Video } from \"./components/VideoPlayer\";\r\n\r\nconst myVideos : Array<Video> = videos;\r\n\r\nReactDOM.render(\r\n  <VideoPlayer videos={myVideos}/>,\r\n  document.getElementById(\"example\")\r\n);"],"sourceRoot":""}