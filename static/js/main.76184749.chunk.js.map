{"version":3,"sources":["components/Choice.tsx","components/YouChoose.tsx","components/EndModal.tsx","components/VideoPlayer.tsx","index.tsx"],"names":["Choice","props","handleClick","bind","this","onSelection","option","Button","key","text","variant","size","onClick","React","Component","YouChoose","choices","question","options","map","currentOption","Modal","show","aria-labelledby","centered","Header","closeButton","Title","id","Body","description","Footer","EndModal","idx","decisions","className","VideoPlayer","state","currentVideo","videos","videoPlaying","items","Array","selectVideo","restartVideo","idToFind","find","video","changeState","next","nextVideo","findVideoById","setState","item","push","findVideoByQuestion","console","log","indexOf","splice","p","path","questionBar","Container","Jumbotron","width","height","onEnded","clipEnd","autoPlay","controls","src","type","myVideos","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.76184749.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Option } from \"./VideoPlayer\";\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nexport interface ChoiceProps {\r\n    option: Option;\r\n    onSelection : (option : Option)=> void;\r\n  }\r\n  \r\nexport class Choice extends React.Component<ChoiceProps, {}> {\r\n\r\n  constructor(props :ChoiceProps) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n    \r\n    handleClick() {\r\n      this.props.onSelection(this.props.option);\r\n    }\r\n    \r\n    render () {\r\n      return (\r\n        <div>\r\n            <Button key={this.props.option.text} variant=\"primary\" size=\"lg\" onClick={this.handleClick}>{this.props.option.text}</Button>\r\n        </div>\r\n      )\r\n    }\r\n  }","import { Question } from \"./VideoPlayer\";\r\nimport { Option } from \"./VideoPlayer\";\r\nimport { Choice } from \"./Choice\";\r\nimport React from \"react\";\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nexport interface YouChooseProps {\r\n  question: Question;\r\n  onSelection: (option: Option) => void;\r\n}\r\n\r\nexport class YouChoose extends React.Component<YouChooseProps, {}> {\r\n  render() {\r\n    var choices: Array<JSX.Element> = this.props.question.options.map(\r\n      (currentOption): JSX.Element => {\r\n        return <Choice key={currentOption.text} option={currentOption} onSelection={this.props.onSelection} />\r\n      });\r\n\r\n    return (\r\n      <Modal\r\n        show\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          You Decide\r\n        </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4>{this.props.question.text}</h4>\r\n          <p>{this.props.question.description}</p>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          {choices}\r\n        </Modal.Footer>\r\n      </Modal>\r\n    )\r\n  }\r\n}","import { Question } from \"./VideoPlayer\";\r\nimport React from \"react\";\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport interface EndModalProps {\r\n  decisions: Array<Question>;\r\n  onSelection: (option: Question) => void;\r\n}\r\n\r\nexport class EndModal extends React.Component<EndModalProps, {}> {\r\n  constructor(props :EndModalProps) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(idx: number) {\r\n    this.props.onSelection(this.props.decisions[idx]);\r\n  }\r\n\r\n  render() {\r\n\r\n    var choices: Array<JSX.Element> = this.props.decisions.map(\r\n      (currentOption, idx): JSX.Element => {\r\n        return <Button variant=\"primary\" size=\"lg\" key={currentOption.text} onClick={this.handleClick.bind(this, idx)}>{currentOption.text}</Button>\r\n      });\r\n\r\n    return (\r\n      <Modal\r\n        show\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Oh No. \r\n        </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4>You didn't surivie Lockdown</h4>\r\n          <p>Maybe one of your previous decisions was not right. Want to change your mind at a past decision?</p>\r\n          <div className=\"btn-group-vertical\">\r\n             {choices}\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    )\r\n  }\r\n}","import * as React from \"react\";\r\nimport { YouChoose } from \"./YouChoose\";\r\n\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { EndModal } from \"./EndModal\";\r\n\r\nexport interface VideoProps {\r\n  videos: Array<Video>;\r\n}\r\n\r\ninterface VideoState {\r\n  currentVideo: Video;\r\n  videoPlaying: boolean;\r\n  items: Array<string>;\r\n  decisions: Array<Question>;\r\n}\r\n\r\nexport interface Video {\r\n  id: number;\r\n  name: string;\r\n  path: string;\r\n  next?: number;\r\n  question?: Question\r\n}\r\n\r\nexport interface Question {\r\n  text: string;\r\n  description: string;\r\n  options: Array<Option>\r\n}\r\n\r\nexport interface Option {\r\n  text: string;\r\n  item?: string;\r\n  next: number\r\n}\r\n\r\nexport class VideoPlayer extends React.Component<VideoProps, VideoState> {\r\n\r\n  constructor(props: VideoProps) {\r\n    super(props);\r\n    this.state = {\r\n      currentVideo: this.props.videos[0],\r\n      videoPlaying: true,\r\n      items: new Array<string>(),\r\n      decisions: new Array<Question>()\r\n    }\r\n    this.selectVideo = this.selectVideo.bind(this);\r\n    this.restartVideo = this.restartVideo.bind(this);\r\n  }\r\n\r\n  findVideoById(videos: Array<Video>, idToFind: number): Video | undefined {\r\n    return videos.find((video: Video) => { return video.id === idToFind })\r\n  }\r\n\r\n  findVideoByQuestion(videos: Array<Video>, question: Question): Video | undefined {\r\n    return videos.find((video: Video) => { return video.question === question })\r\n  }\r\n\r\n  /**\r\n   * When a clip ends, if there is another video then just play that video\r\n   */\r\n  clipEnd() {\r\n    const changeState = { ...this.state }\r\n    if (this.state.currentVideo.next) {\r\n      const nextVideo = this.findVideoById(this.props.videos, this.state.currentVideo.next);\r\n      if (nextVideo) {\r\n        changeState.currentVideo = nextVideo;\r\n        changeState.videoPlaying = true;\r\n      }\r\n    } else {\r\n      changeState.videoPlaying = false;\r\n    }\r\n    this.setState(changeState);\r\n  }\r\n\r\n  selectVideo(option: Option) {\r\n    const changeState = { ...this.state }\r\n    const nextVideo = this.findVideoById(this.props.videos, option.next);\r\n    if (nextVideo) {\r\n      changeState.currentVideo = nextVideo;\r\n      changeState.videoPlaying = true;\r\n      if (option.item) {\r\n        changeState.items.push(option.item);\r\n      }\r\n      if (this.state.currentVideo.question){\r\n        changeState.decisions.push(this.state.currentVideo.question)\r\n      }\r\n    }\r\n    this.setState(changeState);\r\n  }\r\n\r\n  restartVideo(option: Question) {\r\n    const changeState = { ...this.state }\r\n    const nextVideo = this.findVideoByQuestion(this.props.videos, option);\r\n    if (nextVideo) {\r\n      changeState.currentVideo = nextVideo;\r\n      changeState.videoPlaying = true;\r\n      console.log(\"Deleting to index\",changeState.decisions.indexOf(option));\r\n      changeState.decisions.splice(changeState.decisions.indexOf(option), 9e9);\r\n    }\r\n    this.setState(changeState);\r\n  }\r\n\r\n  render() {\r\n    var p = \"videos/\" + this.state.currentVideo.path + \".mp4\";\r\n\r\n    var questionBar: JSX.Element = <br />;\r\n\r\n    if (!this.state.videoPlaying) {\r\n      if (this.state.currentVideo.question){\r\n        questionBar = <YouChoose question={this.state.currentVideo.question} onSelection={this.selectVideo} />\r\n      } else{\r\n        questionBar = <EndModal decisions={this.state.decisions} onSelection={this.restartVideo} />\r\n      \r\n      }\r\n    }\r\n    return (\r\n      <Container className=\"p-3\">\r\n        <Jumbotron>\r\n          <h1 className=\"header\">\r\n            Welcome To You Vs Lockdown\r\n          \r\n          </h1>\r\n        </Jumbotron>\r\n        <div>\r\n          <video key={p} width=\"1100\" height=\"650\" onEnded={this.clipEnd.bind(this)}\r\n            autoPlay controls>\r\n            <source src={p} type=\"video/mp4\" />\r\n          No video\r\n        </video>\r\n          {questionBar}\r\n        </div>\r\n      </Container>\r\n    )\r\n  }\r\n}","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { videos} from \"./videos.json\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { VideoPlayer, Video } from \"./components/VideoPlayer\";\r\n\r\nconst myVideos : Array<Video> = videos;\r\n\r\nReactDOM.render(\r\n  <VideoPlayer videos={myVideos}/>,\r\n  document.getElementById(\"example\")\r\n);"],"sourceRoot":""}